import gradio as gr
import os
import json
from configs.load_config import LoadConfig
from source.chat import chat_with_history

# APP_CFG = LoadConfig()

# def recommend_text(text, chatbot, history):
#     updated_chatbot, response = chat_with_history(text, history)
#     return gr.update(value=text), response

def log_feedback(modify_text, human_feedback, ai_feedback, user_id, session_id):
    feedback = {
        'human': human_feedback,
        'ai': ai_feedback,
        'modify': modify_text
    }
    
    file_dir = os.path.join("./logs/feedback", user_id)
    if not os.path.exists(file_dir):
        os.makedirs(file_dir)

    file_path = os.path.join(file_dir, f"{session_id}.json")
    feedback_entry = []

    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            feedback_entry = json.load(f)
    
    feedback_entry.append(feedback)
    
    with open(file_path, 'w') as f:
        json.dump(feedback_entry, f, indent=4, ensure_ascii=False)
    
    return None, None, None

import time

def generate_session_id():
    return str(int(time.time() % 100000000)).zfill(8)

def reset_conversation():
    global session_id 
    session_id = generate_session_id()
    return [("", "")], []

# session_id = generate_session_id()

# Giao di·ªán Gradio
with gr.Blocks(css="""
    #chatbot { 
        height: 100%; 
        overflow-y: auto; 
        border: 1px solid #ddd; 
        border-radius: 20px; 
        padding: 30px;
        background-color: #f7f7f7;
    }
    #chatbot .bot { 
        background-color: #F0F8FF; 
        color: black;
        float: left;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    #chat-header {
        text-align: center;
        padding: 20px;
        background-color: #FF6347;
        color: white;
        border-radius: 15px 15px 0 0;
        margin-bottom: 20px;
    }

""") as demo:
    
    gr.HTML("""
    <div id="chat-header">
        <h1 style="color: #000000">üí¨ Chatbot h·ªó tr·ª£ b√°n h√†ng ƒëi·ªÅu h√≤a</h1>
        <p style="color: #000000">H√£y ƒë·∫∑t c√¢u h·ªèi, t√¥i s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi b·∫°n!</p>
    </div>
    """)
    
    with gr.Row():
        user_id = gr.Textbox(
            label="User ID",
            placeholder="Nh·∫≠p user VD: huydq46",
            elem_id="user-id-box"
        )
    err_message = gr.Markdown("", visible=True)

    global session_id
    session_id = generate_session_id()

    chatbot = gr.Chatbot(
        # [("", "")],
        elem_id="chatbot",
        bubble_full_width=False,
        # avatar_images=("images/avt_vcc.png", "images/avt_bot.png"),
    )

    history = []  # Initialize the history list

    with gr.Row():
        txt = gr.Textbox(
            show_label=False,
            placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n ·ªü ƒë√¢y...",
            elem_id="msg-box"
        )
        submit_btn = gr.Button("G·ª≠i", elem_id="send-btn")
    
    
    # H√†m ƒë·ªÉ g·ª≠i tin nh·∫Øn v√† x·ª≠ l√Ω cu·ªôc tr√≤ chuy·ªán
    def handle_chat(text, user_id):
        if not user_id:
            return '', [('', '**L·ªói: H√£y nh·∫≠p user id tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn.**')]
        response = chat_with_history(text, user_id, session_id)
        return response

    # X·ª≠ l√Ω khi nh·∫•n n√∫t g·ª≠i
    submit_btn.click(handle_chat, [txt, user_id], [txt, chatbot])
    # submit_btn.submit(handle_chat, [txt, user_id], [txt, chatbot])
    with gr.Row(elem_classes="button-row"):
        modify_txt = gr.Textbox(
             show_label=False,
            placeholder="G√≥p √Ω ch·ªânh s·ª≠a c√¢u tr·∫£ l·ªùi c·ªßa bot...",
            elem_id="modify-box"
        )
        submit_feedback = gr.Button("L∆∞u g√≥p √Ω")


    # H√†m ƒë·ªÉ t·∫£i l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán t·ª´ t·ªáp c·ª•c b·ªô
    def load_conversation(user_id: str, session_id: str) -> list:
        session_file = os.path.join("./logs/user_logs", user_id, f"{session_id}.json")
        
        if os.path.exists(session_file):
            with open(session_file, 'r') as f:
                return json.load(f)
        else:
            return ''

    def handle_feedback(modify_text, user_id):
        # session_id = generate_session_id
        print(' user_id, session_id',  user_id, session_id)
        # T·∫£i l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán t·ª´ t·ªáp c·ª•c b·ªô
        history = load_conversation(user_id, session_id)
        
        # L·∫•y ƒëo·∫°n chat g·∫ßn nh·∫•t
        human_feedback = history[-1][0] if history else ""
        ai_feedback = history[-1][1] if history else ""
        # result = log_feedback(modify_text, human_feedback, ai_feedback, user_id, session_id)
        log_feedback(modify_text, human_feedback, ai_feedback, user_id, session_id)
        
        # Tr·∫£ v·ªÅ gi√° tr·ªã r·ªóng ƒë·ªÉ x√≥a n·ªôi dung Textbox
        return ''

    submit_feedback.click(handle_feedback, [modify_txt, user_id], [modify_txt])

    with gr.Row(elem_classes="button-row"):
        clear = gr.Button("X√≥a tin nh·∫Øn", elem_id="clear-btn")
        reset = gr.Button("Reset cu·ªôc tr√≤ chuy·ªán", elem_id="reset-btn")

    clear.click(lambda: None, None, chatbot, queue=False)
    reset.click(reset_conversation, outputs=[chatbot, txt])

demo.launch(server_name="0.0.0.0", server_port=3333, share = True)
