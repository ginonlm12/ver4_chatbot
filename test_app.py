import gradio as gr
from configs.load_config import LoadConfig
from source.chat import chat_with_history

APP_CFG = LoadConfig()

def reset_conversation():
    return [("", "Xin ch√†o! üòä Em l√† Bot VCC, tr·ª£ l√Ω mua sƒÉm t·∫°i VCC s·∫µn s√†ng t∆∞ v·∫•n cho anh/ch·ªã v·ªÅ c√°c s·∫£n ph·∫©m b√™n em. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ anh/ch·ªã h√¥m nay! Ch√∫c anh/ch·ªã m·ªôt ng√†y tuy·ªát v·ªùi! üòä")], []

def recommend_text(text, chatbot, history):
    updated_chatbot, response = chat_with_history(text, history)
    return gr.update(value=text), response

with gr.Blocks(css="""
    #chatbot { 
        height: 100%; 
        overflow-y: auto; 
        border: 1px solid #ddd; 
        border-radius: 15px; 
        padding: 20px;
        background-color: #f7f7f7;
    }
    #chatbot .user, #chatbot .bot { 
        padding: 10px 15px; 
        border-radius: 20px; 
        display: inline-block;
    }
    #chatbot .user { 
        background-color: #FF1493; 
        color: black;
        float: right;
    }
    #chatbot .bot { 
        background-color: #F0F8FF; 
        color: black;
        float: left;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    #chat-header {
        text-align: center;
        padding: 20px;
        background-color: #FF1493;
        color: white;
        border-radius: 15px 15px 0 0;
        margin-bottom: 20px;
    }
    #msg-box {
        border-radius: 20px;
        border: 1px solid #ddd;
    }
    #send-btn, #reset-btn, #clear-btn {
        border-radius: 20px;
    }
    .button-row {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }
""") as demo:
    gr.HTML("""
    <div id="chat-header">
        <h1 style="color: #000000">üí¨ Chat v·ªõi AI Assistant</h1>
        <p style="color: #000000">H√£y ƒë·∫∑t c√¢u h·ªèi, t√¥i s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi b·∫°n!</p>
    </div>
    """)

    chatbot = gr.Chatbot(
        [("", "Xin ch√†o! üòä Em l√† Bot VCC, tr·ª£ l√Ω mua sƒÉm t·∫°i VCC s·∫µn s√†ng t∆∞ v·∫•n cho anh/ch·ªã v·ªÅ c√°c s·∫£n ph·∫©m b√™n em. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ anh/ch·ªã h√¥m nay! Ch√∫c anh/ch·ªã m·ªôt ng√†y tuy·ªát v·ªùi! üòä")],
        elem_id="chatbot",
        bubble_full_width=False,
        avatar_images=("images/avt_vcc.png", "images/avt_bot.png"),
    )

    history = []  # Initialize the history list
    
    with gr.Row():
        txt = gr.Textbox(
            show_label=False,
            placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n ·ªü ƒë√¢y...",
            elem_id="msg-box"
        )
        submit_btn = gr.Button("G·ª≠i", elem_id="send-btn")

    txt.submit(lambda text, _: chat_with_history(text, history), [txt, chatbot], [txt, chatbot])
    submit_btn.click(lambda text, _: chat_with_history(text, history), [txt, chatbot], [txt, chatbot])

    with gr.Row(elem_classes="recommend-row"):
        recommend_1 = gr.Button("Cho t√¥i xem ƒëi·ªÅu h√≤a c√≥ gi√° kho·∫£ng 16 tri·ªáu")
        recommend_2 = gr.Button("ƒê√®n nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi c√≥ c√¥ng su·∫•t nh·ªè nh·∫•t")
        recommend_3 = gr.Button("B√¨nh n∆∞·ªõc n√≥ng c√≥ dung t√≠ch l·ªõn nh·∫•t")
        recommend_4 = gr.Button("So s√°nh b·∫øp t·ª´ ƒë∆°n v√† b·∫øp t·ª´ ƒë√¥i")

    recommend_1.click(lambda: recommend_text('Cho t√¥i xem ƒëi·ªÅu h√≤a c√≥ gi√° kho·∫£ng 16 tri·ªáu', chatbot, history), outputs=[txt, chatbot])
    recommend_2.click(lambda: recommend_text('T√¥i mu·ªën mua ƒë√®n nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi c√≥ c√¥ng su·∫•t nh·ªè nh·∫•t', chatbot, history), outputs=[txt, chatbot])
    recommend_3.click(lambda: recommend_text('B√¨nh n∆∞·ªõc n√≥ng c√≥ dung t√≠ch l·ªõn nh·∫•t', chatbot, history), outputs=[txt, chatbot])
    recommend_4.click(lambda: recommend_text('So s√°nh b·∫øp t·ª´ ƒë∆°n v√† b·∫øp t·ª´ ƒë√¥i', chatbot, history), outputs=[txt, chatbot])

    with gr.Row(elem_classes="button-row"):
        clear = gr.Button("X√≥a tin nh·∫Øn", elem_id="clear-btn")
        reset = gr.Button("Reset cu·ªôc tr√≤ chuy·ªán", elem_id="reset-btn")

    clear.click(lambda: None, None, chatbot, queue=False)
    reset.click(reset_conversation, outputs=[chatbot, txt])

demo.launch(server_name="10.248.243.99", server_port=7779)